Class 7 Week 3 Notes:Core ConceptsVersion Control System: A system that tracks changes to files over time.Source Code Management (SCM): The practice and tools used to track and control changes in software code.GitOps: A modern operational framework that uses Git as the single source of truth for:Infrastructure configurationApplication deploymentSystem state managementAutomated deployments triggered by Git changesWhat is a CLI, Shell, and Terminal?CLI (Command Line Interface): A text-based interface where users type commands to interact with the computer,                              rather than using a graphical interface with windows and buttons.Shell: The program that interprets and executes the commands you type in a CLI. It acts as an intermediarybetween you and the operating system.Terminal: The application that provides the window/interface where you can access the shell. It's like a container that runs the shell program. (Program               that talks to the shell)Popular Shells:Bash* (Bourne Again Shell)Zsh (Z Shell)PowerShellCommand Prompt (cmd)Git BashNavigation Commands:pwd  - print working directoryls  - list state (allows to see all files in current directory)cd - change directory  (directories have / at the end)clear  - clears out screencd ..  - return to previous directorycd -  - return to previous directorycd ~  - return to home directorycd .  - add all filestouch  - create filerm  - deletemkdir  - Make Directory (Create new folders)rmdir  - Remove Directorycat  - Concatenate/Read Files (Display file contents)rm -rf  - recursive deletion of folder and all files withinmv  - move filemv  - rename filecat  - read text filescode .  - open file for edit./  - directory to folderecho '\n![](./file name)' >> README.md (destination)git init  - start local repogit add  - list file to be staged (local repo)git status  - list staged filesgit branch -M main  - changes has ben savedgit remote -v  - list repo destinationGit SetupGit is a distributed version control system that tracks changes in your code. Before using Git, you need to configure your identity.Initial Git ConfigurationSet Your Name: git config --global user.name "Your Full Name"2. Set Your Email:   Note: You should use your no reply email on Github for simplicity.3. git config --global user.email "your.email@example.com"4. Verify Configuration:     git config --global --listGitHub SetupGitHub is a web-based platform for hosting Git repositories, collaborating on code, project management, and more.Terminology:Repository (Repo): A project folder that contains all your files, folders, and the complete history of changes. Think of                   it as your project's home on GitHub.Remote: A version of your repository that's stored on a server (like GitHub) rather than your local computer.          The connection between your local repo and the GitHub repo.Origin: The default name for the main remote repository. When you clone a repo, GitHub automatically becomes the "origin"        remote.Pull Request (PR): A request to merge changes from one branch into another. It allows code review and discussion before changes are                     integrated.Fork: Your personal copy of someone else's repository. You can make changes to your fork without affecting the original project.Clone: Creating a local copy of a remote repository on your computer.Commit: A snapshot of your changes with a descriptive message. Each commit creates a point in your project's history.Push: Uploading your local commits to the remote repository (GitHub).Pull: Downloading the latest changes from the remote repository to your local copy.Merge: Combining changes from different branches into one branch.AuthenticationAuthentication proves your identity to GitHub so you can access your repositories and make changes. There are two main methods:HTTPS Authentication:Uses your GitHub username and password (or personal access token)Easier to set up but requires entering credentials frequentlyGitHub now requires Personal Access Tokens instead of passwords for securitySSH Authentication:Uses cryptographic key pairs (public and private keys)More secure and convenient once set upNo need to enter credentials repeatedlyCreate Your First RepositoryOn GitHub:Click "+" icon â†’ "New repository"2. Name your repository3. Add description (optional)4. Choose public5. Click "Create repository"Basic Git Workflow# Create the local repo on your computergit init# Begin to add files to the git index (staging)git add <files to stage># Save a "snapshot" of the files in staginggit commit -m "<message name>"# Rename default branch from "master" to "main" (preferred name)git branch -M main# Add your Github (remote) repo into your git index and name "origin"git remote add origin <your remote># Upload commited changes from local repo# Targets the "main" branch on the remote repo named "origin"# -u sets the "upstream defaults" meaning after this you don't need them if you want to use the "main" branch on the remote repo "origin"git push -u origin main